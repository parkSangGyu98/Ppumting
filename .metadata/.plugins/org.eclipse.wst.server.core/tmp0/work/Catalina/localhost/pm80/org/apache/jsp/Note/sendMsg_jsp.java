/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.73
 * Generated at: 2022-08-17 08:21:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.Note;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class sendMsg_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/normalize.css\">\r\n");
      out.write("    <link href=\"../User/homecss/carousel.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link href=\"../assets/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\r\n");
      out.write("    <link rel=\"stylesheet\" href=\"css/sendMsg.css\">\r\n");
      out.write("    <link rel=\"icon\" type=\"image/png\" sizes=\"32x32\" href=\"../ico/favicon-32x32.png\">\r\n");
      out.write(" 	<meta charset=\"utf-8\">\r\n");
      out.write("<title>쪽지보내기 | PPUMTING</title>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("function sendComplete() {\r\n");
      out.write("	alert('쪽지 전송 완료');\r\n");
      out.write("	opener.location.reload();\r\n");
      out.write("	window.opner.location.href=\"/Note/sendMsg\";\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("  <body>\r\n");
      out.write("    <div id=\"smWrap\">\r\n");
      out.write("      <form action=\"sendMsg\" method=\"post\">\r\n");
      out.write("      <h1 class=\"sendMsg\">쪽지 보내기</h1>\r\n");
      out.write("      보내실 분 ID : <input class=\"receiveUserId\" type=\"text\" name=\"receiveUserId\">\r\n");
      out.write("      <input type=\"text\" name=\"title\" maxlength=\"30\" placeholder=\"제목은 최대 30자까지 입력가능합니다.\" class=\"title\"><br>\r\n");
      out.write("      <div class= \"text_box\">\r\n");
      out.write("      <textarea name=\"msg\"></textarea><br>\r\n");
      out.write("      <div class=\"count\">\r\n");
      out.write("      <span>0</span>/200<br>\r\n");
      out.write("      <p class=\"gray\">쪽지 내용은 최대 200자까지만 입력가능합니다.</p>\r\n");
      out.write("      </div>\r\n");
      out.write("      </div>\r\n");
      out.write("      <input class=\"submit_btn\" type=\"submit\" onclick=\"sendComplete()\" value=\"전송\">\r\n");
      out.write("      </form>\r\n");
      out.write("    </div>\r\n");
      out.write("  <script src=\"http://code.jquery.com/jquery-1.10.2.min.js\"></script>\r\n");
      out.write("  <script type=\"text/javascript\">\r\n");
      out.write("  $('.text_box textarea').keyup(function(){\r\n");
      out.write("  	  var content = $(this).val();\r\n");
      out.write("  	  $('.text_box .count span').html(content.length);\r\n");
      out.write("  	  if (content.length > 200){\r\n");
      out.write("  	    alert(\"최대 200자까지 입력 가능합니다.\");\r\n");
      out.write("  	    $(this).val(content.substring(0, 200));\r\n");
      out.write("  	    $('.text_box .count span').html(200);\r\n");
      out.write("  	  }\r\n");
      out.write("  	});\r\n");
      out.write("  </script>\r\n");
      out.write("  </body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
